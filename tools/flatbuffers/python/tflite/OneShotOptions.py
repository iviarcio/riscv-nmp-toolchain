# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers

class OneShotOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOneShotOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OneShotOptions()
        x.Init(buf, n + offset)
        return x

    # OneShotOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OneShotOptions
    def FirmwareSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OneShotOptions
    def ParameterSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OneShotOptions
    def IbufferSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OneShotOptions
    def InputQ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OneShotOptions
    def OutputQ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OneShotOptions
    def Mean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .mean_vec import mean_vec
            obj = mean_vec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OneShotOptions
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def OneShotOptionsStart(builder): builder.StartObject(7)
def OneShotOptionsAddFirmwareSize(builder, firmwareSize): builder.PrependUint32Slot(0, firmwareSize, 0)
def OneShotOptionsAddParameterSize(builder, parameterSize): builder.PrependUint32Slot(1, parameterSize, 0)
def OneShotOptionsAddIbufferSize(builder, ibufferSize): builder.PrependUint32Slot(2, ibufferSize, 0)
def OneShotOptionsAddInputQ(builder, inputQ): builder.PrependUint32Slot(3, inputQ, 0)
def OneShotOptionsAddOutputQ(builder, outputQ): builder.PrependUint32Slot(4, outputQ, 0)
def OneShotOptionsAddMean(builder, mean): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mean), 0)
def OneShotOptionsAddScale(builder, scale): builder.PrependFloat32Slot(6, scale, 0.0)
def OneShotOptionsEnd(builder): return builder.EndObject()
